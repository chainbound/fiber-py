# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from fiber.proto import api_pb2 as api__pb2
from fiber.proto import eth_pb2 as eth__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class APIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeNewTxs = channel.unary_stream(
                '/api.API/SubscribeNewTxs',
                request_serializer=api__pb2.TxFilter.SerializeToString,
                response_deserializer=eth__pb2.Transaction.FromString,
                )
        self.SubscribeNewTxsV2 = channel.unary_stream(
                '/api.API/SubscribeNewTxsV2',
                request_serializer=api__pb2.TxFilter.SerializeToString,
                response_deserializer=api__pb2.TransactionWithSenderMsg.FromString,
                )
        self.SubscribeNewBlobTxs = channel.unary_stream(
                '/api.API/SubscribeNewBlobTxs',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.TransactionWithSenderMsg.FromString,
                )
        self.SendTransaction = channel.stream_stream(
                '/api.API/SendTransaction',
                request_serializer=eth__pb2.Transaction.SerializeToString,
                response_deserializer=api__pb2.TransactionResponse.FromString,
                )
        self.SendRawTransaction = channel.stream_stream(
                '/api.API/SendRawTransaction',
                request_serializer=api__pb2.RawTxMsg.SerializeToString,
                response_deserializer=api__pb2.TransactionResponse.FromString,
                )
        self.SendTransactionV2 = channel.stream_stream(
                '/api.API/SendTransactionV2',
                request_serializer=api__pb2.TransactionMsg.SerializeToString,
                response_deserializer=api__pb2.TransactionResponse.FromString,
                )
        self.SendTransactionSequence = channel.stream_stream(
                '/api.API/SendTransactionSequence',
                request_serializer=api__pb2.TxSequenceMsg.SerializeToString,
                response_deserializer=api__pb2.TxSequenceResponse.FromString,
                )
        self.SendTransactionSequenceV2 = channel.stream_stream(
                '/api.API/SendTransactionSequenceV2',
                request_serializer=api__pb2.TxSequenceMsgV2.SerializeToString,
                response_deserializer=api__pb2.TxSequenceResponse.FromString,
                )
        self.SendRawTransactionSequence = channel.stream_stream(
                '/api.API/SendRawTransactionSequence',
                request_serializer=api__pb2.RawTxSequenceMsg.SerializeToString,
                response_deserializer=api__pb2.TxSequenceResponse.FromString,
                )
        self.SubscribeExecutionPayloads = channel.unary_stream(
                '/api.API/SubscribeExecutionPayloads',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=eth__pb2.ExecutionPayload.FromString,
                )
        self.SubscribeExecutionPayloadsV2 = channel.unary_stream(
                '/api.API/SubscribeExecutionPayloadsV2',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.ExecutionPayloadMsg.FromString,
                )
        self.SubscribeExecutionHeaders = channel.unary_stream(
                '/api.API/SubscribeExecutionHeaders',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=eth__pb2.ExecutionPayloadHeader.FromString,
                )
        self.SubscribeBeaconBlocks = channel.unary_stream(
                '/api.API/SubscribeBeaconBlocks',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=eth__pb2.CompactBeaconBlock.FromString,
                )
        self.SubscribeBeaconBlocksV2 = channel.unary_stream(
                '/api.API/SubscribeBeaconBlocksV2',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=api__pb2.BeaconBlockMsg.FromString,
                )
        self.SubmitBlockStream = channel.stream_stream(
                '/api.API/SubmitBlockStream',
                request_serializer=api__pb2.BlockSubmissionMsg.SerializeToString,
                response_deserializer=api__pb2.BlockSubmissionResponse.FromString,
                )


class APIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubscribeNewTxs(self, request, context):
        """Opens a new transaction stream with the given filter.
        TODO: Deprecate
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeNewTxsV2(self, request, context):
        """Opens a new transaction stream with the given filter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeNewBlobTxs(self, request, context):
        """Opens a new blob transaction stream with the given filter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTransaction(self, request_iterator, context):
        """Sends a signed transaction to the network.
        TODO: Deprecate
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendRawTransaction(self, request_iterator, context):
        """Sends a signed, RLP encoded transaction to the network
        TODO: Deprecate
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTransactionV2(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTransactionSequence(self, request_iterator, context):
        """Sends a sequence of signed transactions to the network.
        TODO: Deprecate
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTransactionSequenceV2(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendRawTransactionSequence(self, request_iterator, context):
        """Sends a sequence of signed, RLP encoded transactions to the network.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeExecutionPayloads(self, request, context):
        """Opens a stream of new execution payloads.
        TODO: Deprecate
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeExecutionPayloadsV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeExecutionHeaders(self, request, context):
        """Opens a stream of new execution payload headers.
        TODO: Deprecate
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeBeaconBlocks(self, request, context):
        """Opens a stream of new beacon blocks. The beacon blocks are "compacted", meaning that the
        execution payload is not included.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeBeaconBlocksV2(self, request, context):
        """Opens a stream of new beacon blocks.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitBlockStream(self, request_iterator, context):
        """Opens a bi-directional stream for new block submissions. The client stream is used to send
        SSZ-encoded beacon blocks, and the server stream is used to send back the state_root, slot and
        a local timestamp as a confirmation that the block was seen and handled.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_APIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeNewTxs': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeNewTxs,
                    request_deserializer=api__pb2.TxFilter.FromString,
                    response_serializer=eth__pb2.Transaction.SerializeToString,
            ),
            'SubscribeNewTxsV2': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeNewTxsV2,
                    request_deserializer=api__pb2.TxFilter.FromString,
                    response_serializer=api__pb2.TransactionWithSenderMsg.SerializeToString,
            ),
            'SubscribeNewBlobTxs': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeNewBlobTxs,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=api__pb2.TransactionWithSenderMsg.SerializeToString,
            ),
            'SendTransaction': grpc.stream_stream_rpc_method_handler(
                    servicer.SendTransaction,
                    request_deserializer=eth__pb2.Transaction.FromString,
                    response_serializer=api__pb2.TransactionResponse.SerializeToString,
            ),
            'SendRawTransaction': grpc.stream_stream_rpc_method_handler(
                    servicer.SendRawTransaction,
                    request_deserializer=api__pb2.RawTxMsg.FromString,
                    response_serializer=api__pb2.TransactionResponse.SerializeToString,
            ),
            'SendTransactionV2': grpc.stream_stream_rpc_method_handler(
                    servicer.SendTransactionV2,
                    request_deserializer=api__pb2.TransactionMsg.FromString,
                    response_serializer=api__pb2.TransactionResponse.SerializeToString,
            ),
            'SendTransactionSequence': grpc.stream_stream_rpc_method_handler(
                    servicer.SendTransactionSequence,
                    request_deserializer=api__pb2.TxSequenceMsg.FromString,
                    response_serializer=api__pb2.TxSequenceResponse.SerializeToString,
            ),
            'SendTransactionSequenceV2': grpc.stream_stream_rpc_method_handler(
                    servicer.SendTransactionSequenceV2,
                    request_deserializer=api__pb2.TxSequenceMsgV2.FromString,
                    response_serializer=api__pb2.TxSequenceResponse.SerializeToString,
            ),
            'SendRawTransactionSequence': grpc.stream_stream_rpc_method_handler(
                    servicer.SendRawTransactionSequence,
                    request_deserializer=api__pb2.RawTxSequenceMsg.FromString,
                    response_serializer=api__pb2.TxSequenceResponse.SerializeToString,
            ),
            'SubscribeExecutionPayloads': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeExecutionPayloads,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=eth__pb2.ExecutionPayload.SerializeToString,
            ),
            'SubscribeExecutionPayloadsV2': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeExecutionPayloadsV2,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=api__pb2.ExecutionPayloadMsg.SerializeToString,
            ),
            'SubscribeExecutionHeaders': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeExecutionHeaders,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=eth__pb2.ExecutionPayloadHeader.SerializeToString,
            ),
            'SubscribeBeaconBlocks': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeBeaconBlocks,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=eth__pb2.CompactBeaconBlock.SerializeToString,
            ),
            'SubscribeBeaconBlocksV2': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeBeaconBlocksV2,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=api__pb2.BeaconBlockMsg.SerializeToString,
            ),
            'SubmitBlockStream': grpc.stream_stream_rpc_method_handler(
                    servicer.SubmitBlockStream,
                    request_deserializer=api__pb2.BlockSubmissionMsg.FromString,
                    response_serializer=api__pb2.BlockSubmissionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.API', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class API(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubscribeNewTxs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.API/SubscribeNewTxs',
            api__pb2.TxFilter.SerializeToString,
            eth__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeNewTxsV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.API/SubscribeNewTxsV2',
            api__pb2.TxFilter.SerializeToString,
            api__pb2.TransactionWithSenderMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeNewBlobTxs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.API/SubscribeNewBlobTxs',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            api__pb2.TransactionWithSenderMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendTransaction(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/api.API/SendTransaction',
            eth__pb2.Transaction.SerializeToString,
            api__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendRawTransaction(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/api.API/SendRawTransaction',
            api__pb2.RawTxMsg.SerializeToString,
            api__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendTransactionV2(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/api.API/SendTransactionV2',
            api__pb2.TransactionMsg.SerializeToString,
            api__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendTransactionSequence(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/api.API/SendTransactionSequence',
            api__pb2.TxSequenceMsg.SerializeToString,
            api__pb2.TxSequenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendTransactionSequenceV2(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/api.API/SendTransactionSequenceV2',
            api__pb2.TxSequenceMsgV2.SerializeToString,
            api__pb2.TxSequenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendRawTransactionSequence(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/api.API/SendRawTransactionSequence',
            api__pb2.RawTxSequenceMsg.SerializeToString,
            api__pb2.TxSequenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeExecutionPayloads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.API/SubscribeExecutionPayloads',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            eth__pb2.ExecutionPayload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeExecutionPayloadsV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.API/SubscribeExecutionPayloadsV2',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            api__pb2.ExecutionPayloadMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeExecutionHeaders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.API/SubscribeExecutionHeaders',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            eth__pb2.ExecutionPayloadHeader.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeBeaconBlocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.API/SubscribeBeaconBlocks',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            eth__pb2.CompactBeaconBlock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeBeaconBlocksV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.API/SubscribeBeaconBlocksV2',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            api__pb2.BeaconBlockMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitBlockStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/api.API/SubmitBlockStream',
            api__pb2.BlockSubmissionMsg.SerializeToString,
            api__pb2.BlockSubmissionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
